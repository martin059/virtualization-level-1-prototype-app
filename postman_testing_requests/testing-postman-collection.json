{
	"info": {
		"_postman_id": "099e444d-44ad-4ab8-bf2f-4663fcbeb3d2",
		"name": "Python API Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17441187"
	},
	"item": [
		{
			"name": "Unit Testing",
			"item": [
				{
					"name": "Test Hello World",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate that the response code should be 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Validate that the response is raw text",
									"pm.test(\"Response is a raw text\", function () {",
									"    pm.expect(pm.response.text());",
									"});",
									"",
									"// Validate that the response says 'Hello World'",
									"pm.test(\"Response has 'Hello World'\", function () {",
									"    pm.expect(pm.response.text()).contains('Hello World');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								""
							]
						},
						"description": "The tests in this request validate that:\n\n- the response code is 200\n- the response is a JSON object\n- the response has an 'arg' object\n- the response has 'headers' object\n- the response has a 'URL' property"
					},
					"response": []
				},
				{
					"name": "Test List All Programming",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate that the response code should be 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Validate that the response is json object",
									"pm.test(\"Response is a json object\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									"",
									"// Validate that the response has an pogramming_languages object",
									"pm.test(\"Response to have 'programming_languages' object\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('programming_languages');",
									"});",
									"",
									"// Validate that the response's pogramming_languages object has 3 child-elements",
									"pm.test(\"Response to have 3 child-elements\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.programming_languages.length).to.gte(3);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/programming_languages",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"programming_languages"
							]
						},
						"description": "The tests in this request validate that:\n\n- the response code is 200\n- the response is a JSON object\n- the response has an 'arg' object\n- the response has 'headers' object\n- the response has a 'URL' property"
					},
					"response": []
				},
				{
					"name": "Test One Programming",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate that the response code should be 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Validate that the response is json object",
									"pm.test(\"Response is a json object\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									"",
									"// Validate that the response does not have an pogramming_languages object",
									"pm.test(\"Response to NOT have 'programming_languages' object\", function () {",
									"    pm.expect(pm.response.json()).to.not.have.property('programming_languages');",
									"});",
									"",
									"// Validate that the response's has the expected publication_year",
									"pm.test(\"Response to have the expected publication_year\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.publication_year).eq(1960)",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/programming_languages/COBOL",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"programming_languages",
								"COBOL"
							]
						},
						"description": "The tests in this request validate that:\n\n- the response code is 200\n- the response is a JSON object\n- the response has an 'arg' object\n- the response has 'headers' object\n- the response has a 'URL' property"
					},
					"response": []
				},
				{
					"name": "Test Add One Programming",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate that the response code should be 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Validate that the response is json object",
									"pm.test(\"Response is a json object\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									"",
									"// Validate that the response does not have an pogramming_languages object",
									"pm.test(\"Response to NOT have 'programming_languages' object\", function () {",
									"    pm.expect(pm.response.json()).to.not.have.property('programming_languages');",
									"});",
									"",
									"// Validate that the response's has the expected publication_year",
									"pm.test(\"Response to have the expected publication_year\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.publication_year).eq(1995)",
									"    pm.expect(jsonData.contribution).eq('Object-oriented programming language.')",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"Java\", \"publication_year\": 1995, \"contribution\": \"Object-oriented programming language.\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/programming_languages",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"programming_languages"
							]
						},
						"description": "The tests in this request validate that:\n\n- the response code is 200\n- the response is a JSON object\n- the response has an 'arg' object\n- the response has 'headers' object\n- the response has a 'URL' property"
					},
					"response": []
				},
				{
					"name": "Test Update One Programming",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate that the response code should be 200",
									"pm.test(\"Status should be 200, it isn't see if 'Java' has been defined in previous test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Validate that the response is json object",
									"pm.test(\"Response is a json object\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									"",
									"// Validate that the response does not have an pogramming_languages object",
									"pm.test(\"Response to NOT have 'programming_languages' object\", function () {",
									"    pm.expect(pm.response.json()).to.not.have.property('programming_languages');",
									"});",
									"",
									"// Validate that the response's has the expected publication_year",
									"pm.test(\"Response to have the expected publication_year\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.contribution).eq('the JVM')",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"Java\", \"publication_year\": 1995, \"contribution\": \"the JVM\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/programming_languages/Java",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"programming_languages",
								"Java"
							]
						},
						"description": "The tests in this request validate that:\n\n- the response code is 200\n- the response is a JSON object\n- the response has an 'arg' object\n- the response has 'headers' object\n- the response has a 'URL' property"
					},
					"response": []
				},
				{
					"name": "Test Delete One Programming",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate that the response code should be 200",
									"pm.test(\"Status should be 200, it isn't see if 'Java' has been defined in previous test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Validate that the response is json object",
									"pm.test(\"Response is a json object\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									"",
									"// Validate that the response does not have an pogramming_languages object",
									"pm.test(\"Response to NOT have 'programming_languages' object\", function () {",
									"    pm.expect(pm.response.json()).to.not.have.property('programming_languages');",
									"});",
									"",
									"// Validate that the response's has the expected publication_year",
									"pm.test(\"Response to have the expected publication_year\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.publication_year).eq(1995)",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/programming_languages/Java",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"programming_languages",
								"Java"
							]
						},
						"description": "The tests in this request validate that:\n\n- the response code is 200\n- the response is a JSON object\n- the response has an 'arg' object\n- the response has 'headers' object\n- the response has a 'URL' property"
					},
					"response": []
				}
			]
		},
		{
			"name": "Task Operations",
			"item": [
				{
					"name": "Test Get Tasks from DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate that the response code should be 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Validate that the response is json object",
									"pm.test(\"Response is a json object\", function () {",
									"    pm.expect(pm.response).to.be.an('object');",
									"});",
									"",
									"// Validate that the response has more than 1 task",
									"pm.test(\"Response is a json object with one child only\", function () {",
									"    // Get the keys of the response object",
									"    var keys = Object.keys(pm.response.json());",
									"    // Check if the number of keys greater than 1",
									"    pm.expect(keys.length).to.gt(1);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							]
						},
						"description": "The tests in this request validate that:\n\n- the response code is 200\n- the response is a JSON object\n- the response has an 'arg' object\n- the response has 'headers' object\n- the response has a 'URL' property"
					},
					"response": []
				},
				{
					"name": "Test Get one Task from DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate that the response code should be 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Validate that the response is json object",
									"pm.test(\"Response is a json object\", function () {",
									"    pm.expect(pm.response).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Response is a json object with one child only\", function () {",
									"    // Get the keys of the response object",
									"    var keys = Object.keys(pm.response.json());",
									"    // Check if the number of keys is equal to 1",
									"    pm.expect(keys.length).to.equal(1);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"1"
							]
						},
						"description": "The tests in this request validate that:\n\n- the response code is 200\n- the response is a JSON object\n- the response has an 'arg' object\n- the response has 'headers' object\n- the response has a 'URL' property"
					},
					"response": []
				},
				{
					"name": "Test KO-1 GET one Task from DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate that the response code should be 404",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Validate that the response is json object",
									"pm.test(\"Response is a json object\", function () {",
									"    pm.expect(pm.response).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Body has error tag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks/-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"-1"
							]
						},
						"description": "The tests in this request validate that:\n\n- the response code is 200\n- the response is a JSON object\n- the response has an 'arg' object\n- the response has 'headers' object\n- the response has a 'URL' property"
					},
					"response": []
				},
				{
					"name": "Test KO-2 GET one Task from DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate that the response code should be 400",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks/aa",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"aa"
							]
						},
						"description": "The tests in this request validate that:\n\n- the response code is 200\n- the response is a JSON object\n- the response has an 'arg' object\n- the response has 'headers' object\n- the response has a 'URL' property"
					},
					"response": []
				},
				{
					"name": "Test Get a Task due dates from DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate that the response code should be 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Validate that the response is json object",
									"pm.test(\"Response is a json object\", function () {",
									"    pm.expect(pm.response).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Response is a json object with one child or more\", function () {",
									"    // Get the keys of the response object",
									"    var keys = Object.keys(pm.response.json());",
									"    // Check if the number of keys is greater or equal to 1",
									"    pm.expect(keys.length).to.gte(1);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks/5/due-by",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"5",
								"due-by"
							]
						},
						"description": "The tests in this request validate that:\n\n- the response code is 200\n- the response is a JSON object\n- the response has an 'arg' object\n- the response has 'headers' object\n- the response has a 'URL' property"
					},
					"response": []
				},
				{
					"name": "Test KO-1 GET Task due dates from DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate that the response code should be 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Validate that the response is json object",
									"pm.test(\"Response is a json object\", function () {",
									"    pm.expect(pm.response).to.be.an('object');",
									"});",
									"",
									"// Validate that the response is an empty json object",
									"pm.test(\"Response is an empty JSON object\", function () {",
									"    pm.response.to.have.jsonBody({});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks/-1/due-by",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"-1",
								"due-by"
							]
						},
						"description": "The tests in this request validate that:\n\n- the response code is 200\n- the response is a JSON object\n- the response has an 'arg' object\n- the response has 'headers' object\n- the response has a 'URL' property"
					},
					"response": []
				},
				{
					"name": "Test KO-2 GET Task due dates from DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate that the response code should be 400",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks/aa/due-by",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"aa",
								"due-by"
							]
						},
						"description": "The tests in this request validate that:\n\n- the response code is 200\n- the response is a JSON object\n- the response has an 'arg' object\n- the response has 'headers' object\n- the response has a 'URL' property"
					},
					"response": []
				},
				{
					"name": "Test KO Get one Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate that the response code should be 400",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks/czczx",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"czczx"
							]
						},
						"description": "The tests in this request validate that:\n\n- the response code is 200\n- the response is a JSON object\n- the response has an 'arg' object\n- the response has 'headers' object\n- the response has a 'URL' property"
					},
					"response": []
				},
				{
					"name": "Test KO Post new Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate that the response code should be 400",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							]
						},
						"description": "The tests in this request validate that:\n\n- the response code is 200\n- the response is a JSON object\n- the response has an 'arg' object\n- the response has 'headers' object\n- the response has a 'URL' property"
					},
					"response": []
				},
				{
					"name": "Test Post new Task to DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate that the response code should be 201",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Validate that the response is json object",
									"pm.test(\"Response is a json object\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									"",
									"// Validate that the response has an 'new_task_id' object",
									"pm.test(\"Response to have 'new_task_id' object\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('new_task_id');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"task_name\":\"Task REST\",\r\n    \"task_descrip\":\"new task from postman with due date!\",\r\n    \"due_date\":\"2024-03-18\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tasks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks"
							]
						},
						"description": "The tests in this request validate that:\n\n- the response code is 200\n- the response is a JSON object\n- the response has an 'arg' object\n- the response has 'headers' object\n- the response has a 'URL' property"
					},
					"response": []
				},
				{
					"name": "Test Update Task in DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate that the response code should be 204",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"task_name\":\"Task REST with put\",\r\n    \"task_descrip\":\"a modified task from postman using PUT!\",\r\n    \"creation_date\": \"2024-03-24\",\r\n    \"task_status\": \"Dropped\",\r\n    \"due_date\":\"2024-03-18\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tasks/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"1"
							]
						},
						"description": "The tests in this request validate that:\n\n- the response code is 200\n- the response is a JSON object\n- the response has an 'arg' object\n- the response has 'headers' object\n- the response has a 'URL' property"
					},
					"response": []
				},
				{
					"name": "Test KO Update Task in DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate that the response code should be 404",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Validate that the response is json object",
									"pm.test(\"Response is a json object\", function () {",
									"    pm.expect(pm.response).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Body has error tag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/tasks/-2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"-2"
							]
						},
						"description": "The tests in this request validate that:\n\n- the response code is 200\n- the response is a JSON object\n- the response has an 'arg' object\n- the response has 'headers' object\n- the response has a 'URL' property"
					},
					"response": []
				},
				{
					"name": "Test Delete Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate that the response code should be 204",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/tasks/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"tasks",
								"1"
							]
						},
						"description": "The tests in this request validate that:\n\n- the response code is 200\n- the response is a JSON object\n- the response has an 'arg' object\n- the response has 'headers' object\n- the response has a 'URL' property"
					},
					"response": []
				}
			],
			"description": "Set of operations that attack the Tasks API. This counts as Integration testing."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://127.0.0.1:5001",
			"type": "string"
		}
	]
}